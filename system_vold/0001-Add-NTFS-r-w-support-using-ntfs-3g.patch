From f858170acfa8a028ec4d65fed0b3d7bfaac5a370 Mon Sep 17 00:00:00 2001
From: Alan Marchesan <justcavalli@gmail.com>
Date: Wed, 14 Nov 2012 08:08:33 +0100
Subject: [PATCH] Add NTFS r/w support using ntfs-3g

---
 Ntfs.cpp | 53 ++++++++++++++---------------------------------------
 1 file changed, 14 insertions(+), 39 deletions(-)

diff --git a/Ntfs.cpp b/Ntfs.cpp
index d5e9772..e3dc12d 100644
--- a/Ntfs.cpp
+++ b/Ntfs.cpp
@@ -38,66 +38,41 @@
 
 #include "Ntfs.h"
 
+static char FSCK_NTFS_PATH[] = "/system/bin/fsck_ntfs";
+static char MKNTFS_PATH[] = "/system/bin/newfs_ntfs";
+static char NTFS_3G_PATH[] = "/system/bin/ntfs-3g";
 extern "C" int logwrap(int argc, const char **argv, int background);
 extern "C" int mount(const char *, const char *, const char *, unsigned long, const void *);
 
 int Ntfs::check(const char *fsPath) {
-  
-    // no NTFS file system check is performed, always return true
-    SLOGI("Ntfs filesystem: Skipping fs checks\n");
+    SLOGW("Skipping NTFS check\n");
     return 0;
-
 }
 
 int Ntfs::doMount(const char *fsPath, const char *mountPoint,
                  bool ro, bool remount, bool executable,
                  int ownerUid, int ownerGid, int permMask, bool createLost) {
     int rc;
-    unsigned long flags;
+    const char *args[11];
     char mountData[255];
 
-    flags = MS_NODEV | MS_NOSUID | MS_DIRSYNC;
-
-    flags |= (executable ? 0 : MS_NOEXEC);
-    flags |= (ro ? MS_RDONLY : 0);
-    flags |= (remount ? MS_REMOUNT : 0);
-
-    // Testing/security, mount ro up to now
-    flags |= MS_RDONLY;
-    
-    /*
-     * Note: This is a temporary hack. If the sampling profiler is enabled,
-     * we make the SD card world-writable so any process can write snapshots.
-     *
-     * TODO: Remove this code once we have a drop box in system_server.
-     */
-    char value[PROPERTY_VALUE_MAX];
-    property_get("persist.sampling_profiler", value, "");
-    if (value[0] == '1') {
-        SLOGW("The SD card is world-writable because the"
-            " 'persist.sampling_profiler' system property is set to '1'.");
-        permMask = 0;
-    }
-
     sprintf(mountData,
-            "uid=%d,gid=%d,fmask=%o,dmask=%o",
+            "locale=utf8,uid=%d,gid=%d,fmask=%o,dmask=%o",
             ownerUid, ownerGid, permMask, permMask);
 
-    rc = mount(fsPath, mountPoint, "ntfs", flags, mountData);
-
-    if (rc && errno == EROFS) {
-        SLOGE("%s appears to be a read only filesystem - retrying mount RO", fsPath);
-        flags |= MS_RDONLY;
-        rc = mount(fsPath, mountPoint, "ntfs", flags, mountData);
-    }
+    args[0] = NTFS_3G_PATH;
+    args[1] = fsPath;
+    args[2] = mountPoint;
+    args[3] = "-o";
+    args[4] = mountData;
+    args[5] = NULL;
+    rc = logwrap(5, args, 0);
 
     return rc;
 }
 
 int Ntfs::format(const char *fsPath, unsigned int numSectors) {
-    
-    SLOGE("Format ntfs filesystem not supported\n");
+    SLOGE("Skipping ntfs format\n");
     errno = EIO;
     return -1;
-
 }
-- 
1.8.1.5

